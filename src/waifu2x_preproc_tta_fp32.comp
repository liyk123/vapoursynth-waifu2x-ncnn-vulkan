#version 450

layout (binding = 0) readonly buffer bottom_blob { float bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob0 { float top_blob0_data[]; };
layout (binding = 2) writeonly buffer top_blob1 { float top_blob1_data[]; };
layout (binding = 3) writeonly buffer top_blob2 { float top_blob2_data[]; };
layout (binding = 4) writeonly buffer top_blob3 { float top_blob3_data[]; };
layout (binding = 5) writeonly buffer top_blob4 { float top_blob4_data[]; };
layout (binding = 6) writeonly buffer top_blob5 { float top_blob5_data[]; };
layout (binding = 7) writeonly buffer top_blob6 { float top_blob6_data[]; };
layout (binding = 8) writeonly buffer top_blob7 { float top_blob7_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int cstep;

    int outw;
    int outh;
    int outcstep;

    int pad_top;
    int pad_left;

    int crop_x;
    int crop_y;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);
    int gzi = gz * p.outcstep;

    if (gx >= p.outw || gy >= p.outh || gz >= 3)
        return;

    int x = gx + p.crop_x - p.pad_left;
    int y = gy + p.crop_y - p.pad_top;
    x = clamp(x, 0, p.w - 1);
    y = clamp(y, 0, p.h - 1);

    float v = clamp(bottom_blob_data[gz * p.cstep + y * p.w + x], 0.0, 1.0);

    top_blob0_data[gzi + gy * p.outw + gx] = v;
    top_blob1_data[gzi + gy * p.outw + (p.outw - 1 - gx)] = v;
    top_blob2_data[gzi + (p.outh - 1 - gy) * p.outw + (p.outw - 1 - gx)] = v;
    top_blob3_data[gzi + (p.outh - 1 - gy) * p.outw + gx] = v;
    top_blob4_data[gzi + gx * p.outh + gy] = v;
    top_blob5_data[gzi + gx * p.outh + (p.outh - 1 - gy)] = v;
    top_blob6_data[gzi + (p.outw - 1 - gx) * p.outh + (p.outh - 1 - gy)] = v;
    top_blob7_data[gzi + (p.outw - 1 - gx) * p.outh + gy] = v;
}
