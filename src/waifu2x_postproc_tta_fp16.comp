#version 450
#extension GL_EXT_shader_16bit_storage: require

layout (binding = 0) readonly buffer bottom_blob0 { float16_t bottom_blob0_data[]; };
layout (binding = 1) readonly buffer bottom_blob1 { float16_t bottom_blob1_data[]; };
layout (binding = 2) readonly buffer bottom_blob2 { float16_t bottom_blob2_data[]; };
layout (binding = 3) readonly buffer bottom_blob3 { float16_t bottom_blob3_data[]; };
layout (binding = 4) readonly buffer bottom_blob4 { float16_t bottom_blob4_data[]; };
layout (binding = 5) readonly buffer bottom_blob5 { float16_t bottom_blob5_data[]; };
layout (binding = 6) readonly buffer bottom_blob6 { float16_t bottom_blob6_data[]; };
layout (binding = 7) readonly buffer bottom_blob7 { float16_t bottom_blob7_data[]; };
layout (binding = 8) writeonly buffer top_blob { float top_blob_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int cstep;

    int outw;
    int outh;
    int outcstep;

    int offset_x;
    int gx_max;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);
    int gzi = gz * p.cstep;

    if (gx >= p.gx_max || gy >= p.outh || gz >= 3)
        return;

    float v0 = float(bottom_blob0_data[gzi + gy * p.w + gx]);
    float v1 = float(bottom_blob1_data[gzi + gy * p.w + (p.w - 1 - gx)]);
    float v2 = float(bottom_blob2_data[gzi + (p.h - 1 - gy) * p.w + (p.w - 1 - gx)]);
    float v3 = float(bottom_blob3_data[gzi + (p.h - 1 - gy) * p.w + gx]);
    float v4 = float(bottom_blob4_data[gzi + gx * p.h + gy]);
    float v5 = float(bottom_blob5_data[gzi + gx * p.h + (p.h - 1 - gy)]);
    float v6 = float(bottom_blob6_data[gzi + (p.w - 1 - gx) * p.h + (p.h - 1 - gy)]);
    float v7 = float(bottom_blob7_data[gzi + (p.w - 1 - gx) * p.h + gy]);

    float v = (v0 + v1 + v2 + v3 + v4 + v5 + v6 + v7) * 0.125f;

    top_blob_data[gz * p.outcstep + gy * p.outw + gx + p.offset_x] = clamp(v * 1.006, 0.0, 1.0);
}
